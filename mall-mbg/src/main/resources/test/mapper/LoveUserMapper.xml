<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="test.mapper.LoveUserMapper">
  <resultMap id="BaseResultMap" type="test.model.LoveUser">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="number" jdbcType="VARCHAR" property="number" />
    <result column="sex" jdbcType="VARCHAR" property="sex" />
    <result column="age" jdbcType="VARCHAR" property="age" />
    <result column="marriage" jdbcType="VARCHAR" property="marriage" />
    <result column="nation" jdbcType="VARCHAR" property="nation" />
    <result column="height" jdbcType="VARCHAR" property="height" />
    <result column="weight" jdbcType="VARCHAR" property="weight" />
    <result column="zodiac" jdbcType="VARCHAR" property="zodiac" />
    <result column="constellation" jdbcType="VARCHAR" property="constellation" />
    <result column="education" jdbcType="VARCHAR" property="education" />
    <result column="salary" jdbcType="VARCHAR" property="salary" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="test.model.LoveUser">
    <result column="other" jdbcType="LONGVARCHAR" property="other" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, number, sex, age, marriage, nation, height, weight, zodiac, constellation, education, 
    salary
  </sql>
  <sql id="Blob_Column_List">
    other
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="test.model.LoveUserExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from love_user
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="test.model.LoveUserExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from love_user
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from love_user
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from love_user
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="test.model.LoveUserExample">
    delete from love_user
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="test.model.LoveUser">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into love_user (number, sex, age, 
      marriage, nation, height, 
      weight, zodiac, constellation, 
      education, salary, other
      )
    values (#{number,jdbcType=VARCHAR}, #{sex,jdbcType=VARCHAR}, #{age,jdbcType=VARCHAR}, 
      #{marriage,jdbcType=VARCHAR}, #{nation,jdbcType=VARCHAR}, #{height,jdbcType=VARCHAR}, 
      #{weight,jdbcType=VARCHAR}, #{zodiac,jdbcType=VARCHAR}, #{constellation,jdbcType=VARCHAR}, 
      #{education,jdbcType=VARCHAR}, #{salary,jdbcType=VARCHAR}, #{other,jdbcType=LONGVARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="test.model.LoveUser">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into love_user
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="number != null">
        number,
      </if>
      <if test="sex != null">
        sex,
      </if>
      <if test="age != null">
        age,
      </if>
      <if test="marriage != null">
        marriage,
      </if>
      <if test="nation != null">
        nation,
      </if>
      <if test="height != null">
        height,
      </if>
      <if test="weight != null">
        weight,
      </if>
      <if test="zodiac != null">
        zodiac,
      </if>
      <if test="constellation != null">
        constellation,
      </if>
      <if test="education != null">
        education,
      </if>
      <if test="salary != null">
        salary,
      </if>
      <if test="other != null">
        other,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="number != null">
        #{number,jdbcType=VARCHAR},
      </if>
      <if test="sex != null">
        #{sex,jdbcType=VARCHAR},
      </if>
      <if test="age != null">
        #{age,jdbcType=VARCHAR},
      </if>
      <if test="marriage != null">
        #{marriage,jdbcType=VARCHAR},
      </if>
      <if test="nation != null">
        #{nation,jdbcType=VARCHAR},
      </if>
      <if test="height != null">
        #{height,jdbcType=VARCHAR},
      </if>
      <if test="weight != null">
        #{weight,jdbcType=VARCHAR},
      </if>
      <if test="zodiac != null">
        #{zodiac,jdbcType=VARCHAR},
      </if>
      <if test="constellation != null">
        #{constellation,jdbcType=VARCHAR},
      </if>
      <if test="education != null">
        #{education,jdbcType=VARCHAR},
      </if>
      <if test="salary != null">
        #{salary,jdbcType=VARCHAR},
      </if>
      <if test="other != null">
        #{other,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="test.model.LoveUserExample" resultType="java.lang.Integer">
    select count(*) from love_user
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update love_user
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.number != null">
        number = #{record.number,jdbcType=VARCHAR},
      </if>
      <if test="record.sex != null">
        sex = #{record.sex,jdbcType=VARCHAR},
      </if>
      <if test="record.age != null">
        age = #{record.age,jdbcType=VARCHAR},
      </if>
      <if test="record.marriage != null">
        marriage = #{record.marriage,jdbcType=VARCHAR},
      </if>
      <if test="record.nation != null">
        nation = #{record.nation,jdbcType=VARCHAR},
      </if>
      <if test="record.height != null">
        height = #{record.height,jdbcType=VARCHAR},
      </if>
      <if test="record.weight != null">
        weight = #{record.weight,jdbcType=VARCHAR},
      </if>
      <if test="record.zodiac != null">
        zodiac = #{record.zodiac,jdbcType=VARCHAR},
      </if>
      <if test="record.constellation != null">
        constellation = #{record.constellation,jdbcType=VARCHAR},
      </if>
      <if test="record.education != null">
        education = #{record.education,jdbcType=VARCHAR},
      </if>
      <if test="record.salary != null">
        salary = #{record.salary,jdbcType=VARCHAR},
      </if>
      <if test="record.other != null">
        other = #{record.other,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update love_user
    set id = #{record.id,jdbcType=INTEGER},
      number = #{record.number,jdbcType=VARCHAR},
      sex = #{record.sex,jdbcType=VARCHAR},
      age = #{record.age,jdbcType=VARCHAR},
      marriage = #{record.marriage,jdbcType=VARCHAR},
      nation = #{record.nation,jdbcType=VARCHAR},
      height = #{record.height,jdbcType=VARCHAR},
      weight = #{record.weight,jdbcType=VARCHAR},
      zodiac = #{record.zodiac,jdbcType=VARCHAR},
      constellation = #{record.constellation,jdbcType=VARCHAR},
      education = #{record.education,jdbcType=VARCHAR},
      salary = #{record.salary,jdbcType=VARCHAR},
      other = #{record.other,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update love_user
    set id = #{record.id,jdbcType=INTEGER},
      number = #{record.number,jdbcType=VARCHAR},
      sex = #{record.sex,jdbcType=VARCHAR},
      age = #{record.age,jdbcType=VARCHAR},
      marriage = #{record.marriage,jdbcType=VARCHAR},
      nation = #{record.nation,jdbcType=VARCHAR},
      height = #{record.height,jdbcType=VARCHAR},
      weight = #{record.weight,jdbcType=VARCHAR},
      zodiac = #{record.zodiac,jdbcType=VARCHAR},
      constellation = #{record.constellation,jdbcType=VARCHAR},
      education = #{record.education,jdbcType=VARCHAR},
      salary = #{record.salary,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="test.model.LoveUser">
    update love_user
    <set>
      <if test="number != null">
        number = #{number,jdbcType=VARCHAR},
      </if>
      <if test="sex != null">
        sex = #{sex,jdbcType=VARCHAR},
      </if>
      <if test="age != null">
        age = #{age,jdbcType=VARCHAR},
      </if>
      <if test="marriage != null">
        marriage = #{marriage,jdbcType=VARCHAR},
      </if>
      <if test="nation != null">
        nation = #{nation,jdbcType=VARCHAR},
      </if>
      <if test="height != null">
        height = #{height,jdbcType=VARCHAR},
      </if>
      <if test="weight != null">
        weight = #{weight,jdbcType=VARCHAR},
      </if>
      <if test="zodiac != null">
        zodiac = #{zodiac,jdbcType=VARCHAR},
      </if>
      <if test="constellation != null">
        constellation = #{constellation,jdbcType=VARCHAR},
      </if>
      <if test="education != null">
        education = #{education,jdbcType=VARCHAR},
      </if>
      <if test="salary != null">
        salary = #{salary,jdbcType=VARCHAR},
      </if>
      <if test="other != null">
        other = #{other,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="test.model.LoveUser">
    update love_user
    set number = #{number,jdbcType=VARCHAR},
      sex = #{sex,jdbcType=VARCHAR},
      age = #{age,jdbcType=VARCHAR},
      marriage = #{marriage,jdbcType=VARCHAR},
      nation = #{nation,jdbcType=VARCHAR},
      height = #{height,jdbcType=VARCHAR},
      weight = #{weight,jdbcType=VARCHAR},
      zodiac = #{zodiac,jdbcType=VARCHAR},
      constellation = #{constellation,jdbcType=VARCHAR},
      education = #{education,jdbcType=VARCHAR},
      salary = #{salary,jdbcType=VARCHAR},
      other = #{other,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="test.model.LoveUser">
    update love_user
    set number = #{number,jdbcType=VARCHAR},
      sex = #{sex,jdbcType=VARCHAR},
      age = #{age,jdbcType=VARCHAR},
      marriage = #{marriage,jdbcType=VARCHAR},
      nation = #{nation,jdbcType=VARCHAR},
      height = #{height,jdbcType=VARCHAR},
      weight = #{weight,jdbcType=VARCHAR},
      zodiac = #{zodiac,jdbcType=VARCHAR},
      constellation = #{constellation,jdbcType=VARCHAR},
      education = #{education,jdbcType=VARCHAR},
      salary = #{salary,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>